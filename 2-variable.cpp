#include <iostream>
using namespace std;

/*********************************************************
变量类型
bool 存储值为true或false
char 通常是一个八位字节，这是一个整数类型
int 4个字节
float 4个字节，其中1位符号，8位指数，23位小数
double 8个字节，其中1位符号，11位指数，52位小数
void 表示类型缺失
wchar_t 宽字符类型
*/

/*********************************************************
变量声明
变量声明向编译器保证变量以给定的类型和名称存在，
这样编译器在不需要知道变量完整细节的情况下也能继续进一步的编译。
变量声明只在编译时有它的意义，
在程序连接时编译器需要实际的变量声明。
当您使用多个文件且只在其中一个文件中定义变量时
（定义变量的文件在程序连接时是可用的），
变量声明就显得非常有用。
您可以使用 extern 关键字在任何地方声明一个变量。
虽然您可以在 C++ 程序中多次声明一个变量，
但变量只能在某个文件、函数或代码块中被定义一次。
extern int d = 3, f = 5;    // d 和 f 的声明
*/

extern int a, b;
extern int c;
extern float f;

// 变量在头部就已经被声明，但它们是在主函数内被定义和初始化的
int main ()
{
    /*********************************************************
     * 不带初始化的变量定义
     * 不带初始化的定义：带有静态存储持续时间的变量会被隐式初始化为NULL
     * （所有字节的值都是 0），其他所有变量的初始值是未定义的。
     * int    i, j, k;
     * char   c, ch;
     *
     * 带初始化的变量定义
     * int d = 3, f = 5;           // 定义并初始化 d 和 f
     * byte z = 22;                // 定义并初始化 z
     * char x = 'x';               // 变量 x 的值为 'x'
     */

    // 变量定义
    int a, b;
    int c;
    float f;

    // 实际初始化
    a = 10;
    b = 20;
    c = a + b;

    cout << c << endl ;

    f = 70.0/3.0;
    cout << f << endl ;

    return 0;
}

/*********************************************************
C++ 中的左值（Lvalues）和右值（Rvalues）
C++ 中有两种类型的表达式：
左值（lvalue）：
指向内存位置的表达式被称为左值（lvalue）表达式。
左值可以出现在赋值号的左边或右边。

右值（rvalue）：
术语右值（rvalue）指的是存储在内存中某些地址的数值。
右值是不能对其进行赋值的表达式，
也就是说，右值可以出现在赋值号的右边，但不能出现在赋值号的左边。
*/
