#include <iostream>
using namespace std;

/*********************************************************
整数常量
整数常量可以是十进制、八进制或十六进制的常量。
前缀指定基数: 0x 或 0X 表示十六进制
         0 表示八进制
         不带前缀则默认表示十进制
整数常量也可以带一个后缀
后缀是 U 和 L 的组合
U 表示无符号整数（unsigned）
L 表示长整数（long）
后缀可以是大写或小写，U和L的顺序任意

下面列举几个整数常量的实例：
212         // 合法的
215u        // 合法的
0xFeeL      // 合法的
078         // 非法的：8 不是八进制的数字
032UU       // 非法的：不能重复后缀

以下是各种类型的整数常量的实例：
85         // 十进制
0213       // 八进制
0x4b       // 十六进制
30         // 整数
30u        // 无符号整数
30l        // 长整数
30ul       // 无符号长整数
*/

/*********************************************************
浮点常量
浮点常量由整数部分、小数点、小数部分和指数部分组成。
您可以使用小数形式或者指数形式来表示浮点常量。

当使用小数形式表示时，必须包含整数部分、小数部分，或同时包含两者。
当使用指数形式表示时， 必须包含小数点、指数，或同时包含两者。
带符号的指数是用 e 或 E 引入的。

下面列举几个浮点常量的实例：
3.14159       // 合法的
314159E-5L    // 合法的
510E          // 非法的：不完整的指数
210f          // 非法的：没有小数或指数
.e55          // 非法的：缺少整数或分数
*/

/*********************************************************
布尔常量
布尔常量共有两个，它们都是标准的C++关键字：
true    代表真
false   代表假
*/

/*********************************************************
字符常量
字符常量是括在单引号中。

如果以 L开头则是宽字符常量,例如 L'x',存储在 wchar_t变量中
否则就是一个窄字符常量,例如 'x',存储在char变量中

字符常量可以是
一个普通的字符（例如 'x'）
一个转义序列（例如 '\t'）
或一个通用的字符（例如 '\u02C0'）

转义序列      含义
\\	         \ 字符
\'	         ' 字符
\"	         " 字符
\?	         ? 字符
\a	         警报铃声
\b	         退格键
\f	         换页符
\n	         换行符
\r	         回车
\t	         水平制表符
\v	         垂直制表符
\ooo	     一到三位的八进制数
\xhh         一个或多个数字的十六进制数
*/

/*********************************************************
字符串常量
字符串字面值或常量是括在双引号 "" 中的

一个字符串包含类似于字符常量的字符：
普通的字符、转义序列和通用的字符。


下面的实例显示了一些字符串常量。
下面这三种形式所显示的字符串是相同的。

    "hello, dear"
    "hello, \
    dear"
    "hello, " "d" "ear"
*/

/*********************************************************
定义常量
在 C++ 中，有两种简单的定义常量的方式：
    使用 #define 预处理器
    使用 const 关键字

#define 预处理器定义常量的形式：
    #define identifier value
const 前缀声明指定类型的常量如下所示：
    const type variable = value;
*/

#define LENGTH 10
#define WIDTH  5
#define NEWLINE '\n'

int main()
{
    cout << "Hello\tWorld\n\n";

    int area;
    area = LENGTH * WIDTH;
    cout << area;
    cout << NEWLINE;

    const int  LENGTH_1 = 10;
    const int  WIDTH_1  = 5;
    const char NEWLINE_1 = '\n';
    int area_1;

    area_1 = LENGTH_1 * WIDTH_1;
    cout << area_1;
    cout << NEWLINE_1;

    return 0;
}

/*********************************************************
宏定义#define和常量const的区别

1. 类型和安全检查不同
宏定义是字符替换，没有数据类型的区别，
 同时这种替换没有类型安全检查，可能产生边际效应等错误；
const常量是常量的声明，有类型区别，
 需要在编译阶段进行类型检查

2. 编译器处理不同
宏定义是一个"编译时"概念，在预处理阶段展开，不能对宏定义进行调试，
 生命周期结束于编译时期；
const常量是一个"运行时"概念，在程序运行使用，
 类似于一个只读行数据

3. 存储方式不同
宏定义是直接替换，不会分配内存，存储与程序的代码段中；
const常量需要进行内存分配，存储与程序的数据段中

4. 定义域不同
void f1 ()
{
    #define N 12
    const int n 12;
}
void f2 ()
{
    cout<<N <<endl; //正确，N已经定义过，不受定义域限制
    cout<<n <<endl; //错误，n定义域只在f1函数中
}

5. 定义后能否取消

宏定义可以通过#undef来使之前的宏定义失效
const常量定义后将在定义域内永久有效

void f1()
{
  #define N 12
  const int n = 12;

  #undef N //取消宏定义后，即使在f1函数中，N也无效了
  #define N 21//取消后可以重新定义
}

6. 是否可以做函数参数

宏定义不能作为参数传递给函数
const常量可以在函数的参数列表中出现
*/

